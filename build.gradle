plugins {
    id "java"
    id "idea"
    id "maven"
    id "maven-publish"
    id "signing"
}

version = '0.0.1'
group = 'com.github.macgregor'
sourceCompatibility = 1.8
targetCompatibility = 1.8
description = "Project containing model objects used by the unofficial Endless Frontier api"

project.ext {
    url = "https://github.com/macgregor/endlessfrontier_model"
    scmUrl = "https://github.com/macgregor/endlessfrontier_model.git"
    scmConnection = "scm:git:git://github.com/macgregor/endlessfrontier_model.git"
    scmDeveloperConnection = "scm:git:ssh:git@github.com:macgregor/endlessfrontier_model.git"
    licenseName = "MIT License"
    licenseUrl = "http://www.opensource.org/licenses/mit-license.php"
    licenseDistribution = "repo"
    developerId = "macgregor"
    developerName = "Matthew Stratton"
    developerEmail = "matthew.m.stratton@gmail.com"
}

// UTF-8 should be standard by now. So use it!
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

dependencies {
    compile(
            "io.swagger:swagger-annotations:1.5.18",
            "com.fasterxml.jackson.core:jackson-annotations:2.9.4",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.4",
            "org.apache.commons:commons-lang3:3.7",
            "commons-beanutils:commons-beanutils:1.9.3",
            "org.slf4j:slf4j-api:1.7.25"
    )
    testCompile(
            'junit:junit:4.12',
            "org.mockito:mockito-core:2.15.0",
            "commons-io:commons-io:2.6",
            "ch.qos.logback:logback-classic:1.2.3"
    )
}

task testJar(type: Jar) {
    baseName = project.name + '-test'
    from sourceSets.test.output
}

task testSourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava + sourceSets.test.allJava
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

signing {
    useGpgCmd()
    sign configurations.archives
}

def pomProjectDetails(pom) {
    pom.withXml {
        asNode().children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST
            name project.name
            description project.description
            url project.url
            scm {
                url project.scmUrl
                connection project.scmConnection
                developerConnection project.scmDeveloperConnection
            }
            licenses {
                license {
                    name project.licenseName
                    url project.licenseUrl
                    distribution project.licenseDistribution
                }
            }
            developers {
                developer {
                    id project.developerId
                    name project.developerName
                    email project.developerEmail
                }
            }
        }
    }
}



publishing {
    publications {
        mavenJava(MavenPublication) {
            pomProjectDetails(pom)
            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
        testUtil(MavenPublication) {
            pomProjectDetails(pom)
            artifactId project.name + '-test'
            artifact testJar

            // create the sign pom artifact
            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.testCompile.getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                }

                def pomFile = file("${project.buildDir}/generated-test-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(testSourceJar) {
                classifier = 'sources'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }

    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
    tasks.generatePomFileForTestUtilPublication {
        destination = file("$buildDir/generated-test-pom.xml")
    }
    tasks.publishTestUtilPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishTestUtilPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

clean.doFirst {
    delete "${rootDir}/out/"
}

// gives us better output when running tests
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "skipped", "passed", "failed"
        showStandardStreams true
    }
    maxParallelForks = 2
}


task stage(dependsOn: ['build', 'clean', 'publish', 'publishToMavenLocal']) {}
build.mustRunAfter clean